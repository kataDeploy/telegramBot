{"version":3,"sources":["TechnicalAnalysis/SRline.js","TechnicalAnalysis/TechnicalRequirements.js","App.js","reportWebVitals.js","index.js"],"names":["SupLine","arr","chunk","perc","strLevel","array","minValsOfSegArr","segArr","i","j","segmentedArr","length","push","slice","segmented2DArr","minVals","el","data","Math","min","minValuesOfSegmentedArr","minValOfSegArr","supportArr","minMean","findCloseRangeOfMin","mean","reduce","a","b","strength","filter","includes","closeArr","forEach","findPercentageDif","initVal","lastVal","parseFloat","ResLine","maxValsOfSegArr","max","maxValuesOfSegmentedArr","maxValOfSegArr","supportMaxArr","maxMean","findCloseRangeOfMax","TechnicalRequirements","useState","market","setMarket","tickInterval","setTickInterval","tickCount","setTickCount","pineEditorOutput","setPineEditorOutput","percentage","setPercentage","strengthLevel","setStrengthLevel","candleSequence","setCandleSeuqence","SRColors","concatArray","arr1","arr2","concat","eliminateCloseSR","removedElements","abs","index","setPineText","text","prev","style","display","className","type","onClick","url","axios","get","then","res","arr3","arrClose","date","Date","toString","open","high","low","close","line","eliminatedMin","eliminatedMax","placeholder","onChange","e","target","value","toUpperCase","parseInt","size","header","footer","bordered","dataSource","renderItem","item","Item","intervalId","App","trackTable","setTrackTable","price","setPrice","parity","setParity","operation","setOperation","telegramApi","setTelegramApi","chatId","setChatId","backendIp","setBackendIp","startButtonDisable","setStartButtonDisable","onSync","console","log","Option","Select","operationMenu","defaultValue","width","columns","title","dataIndex","key","render","record","color","conditionDone","candleCloseCondition","height","backgroundColor","danger","post","clearInterval","setInterval","disabled","margin","reqParam","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.cd607a3f.chunk.js","sourcesContent":["export function SupLine (arr,chunk,perc,strLevel) {\r\n    let minValsOfSegArr = minValuesOfSegmentedArr();\r\n    let minValOfSegArr = null;\r\n    let supportArr = null;\r\n    const minMean = [];\r\n    while(minValsOfSegArr.length>0){\r\n        minValOfSegArr = findMinValueOfSegmentedArr();\r\n        supportArr = findCloseRangeOfMin();\r\n        const mean = calcMean(supportArr);\r\n        if(supportArr.length>strLevel){\r\n            minMean.push({mean,strength:supportArr.length});\r\n        }\r\n        removeSupFromMinVals();\r\n    }\r\n\r\n    return minMean;\r\n    function segmented2DArr(){\r\n        let i,j;\r\n        const segmentedArr = [];\r\n        for (i=0,j=arr.length; i<j; i+=chunk) {\r\n            segmentedArr.push(arr.slice(i,i+chunk));\r\n        }\r\n        return segmentedArr;\r\n    }\r\n    \r\n    function minValuesOfSegmentedArr(){\r\n        const segArr = segmented2DArr();\r\n        const minVals = [];\r\n        for (let i = 0; i < segArr.length; i++) {\r\n            const el = findMinValue(segArr[i]);\r\n            minVals.push(el);\r\n        }\r\n        return minVals;\r\n    }\r\n  \r\n    function findCloseRangeOfMin(){\r\n        const closeArr = [];\r\n        minValsOfSegArr.forEach(el => {\r\n            if(findPercentageDif(el,minValOfSegArr)<perc \r\n                && findPercentageDif(el,minValOfSegArr)>-perc){\r\n                    closeArr.push(el);\r\n            }\r\n        })\r\n        return closeArr;\r\n    }\r\n   \r\n    function calcMean(array) {\r\n        return array.reduce((a, b) => a + b) / array.length;\r\n    }\r\n\r\n    function removeSupFromMinVals () {\r\n        minValsOfSegArr = minValsOfSegArr.filter(el => !supportArr.includes(el) );\r\n    }\r\n  \r\n    function findMinValueOfSegmentedArr(){\r\n        return Math.min(...minValsOfSegArr); \r\n    }\r\n\r\n    function findPercentageDif(initVal, lastVal){\r\n        const dif = initVal-lastVal;\r\n        const perc = parseFloat(dif/initVal)*100;\r\n        return perc;\r\n    }\r\n    function findMinValue(data){\r\n        return Math.min(...data); \r\n    }\r\n   \r\n}\r\nexport function ResLine (arr,chunk,perc,strLevel) {\r\n    let maxValsOfSegArr = maxValuesOfSegmentedArr();\r\n    let maxValOfSegArr = null;\r\n    let supportMaxArr = null;\r\n    const maxMean = [];\r\n    while(maxValsOfSegArr.length>0){\r\n        maxValOfSegArr = findMaxValueOfSegmentedArr();\r\n        supportMaxArr = findCloseRangeOfMax();\r\n        const mean = calcMean(supportMaxArr);\r\n        if(supportMaxArr.length>strLevel){\r\n            maxMean.push({mean,strength:supportMaxArr.length});\r\n        }\r\n        removeSupFromMaxVals();\r\n    }\r\n    return maxMean;\r\n    function segmented2DArr(){\r\n        let i,j;\r\n        const segmentedArr = [];\r\n        for (i=0,j=arr.length; i<j; i+=chunk) {\r\n            segmentedArr.push(arr.slice(i,i+chunk));\r\n        }\r\n        return segmentedArr;\r\n    }\r\n    \r\n    \r\n    function maxValuesOfSegmentedArr(){\r\n        const segArr = segmented2DArr();\r\n        const minVals = [];\r\n        for (let i = 0; i < segArr.length; i++) {\r\n            const el = findMaxValue(segArr[i]);\r\n            minVals.push(el);\r\n        }\r\n        return minVals;\r\n    }\r\n    \r\n  \r\n    function findCloseRangeOfMax(){\r\n        const closeArr = [];\r\n        maxValsOfSegArr.forEach(el => {\r\n            if(findPercentageDif(el,maxValOfSegArr)<perc \r\n                && findPercentageDif(el,maxValOfSegArr)>-perc){\r\n                    closeArr.push(el);\r\n            }\r\n        })\r\n        return closeArr;\r\n    }\r\n\r\n    function calcMean(array) {\r\n        return array.reduce((a, b) => a + b) / array.length;\r\n    }\r\n\r\n  \r\n    function removeSupFromMaxVals () {\r\n        maxValsOfSegArr = maxValsOfSegArr.filter(el => !supportMaxArr.includes(el) );\r\n    }\r\n   \r\n    function findMaxValueOfSegmentedArr(){\r\n        return Math.max(...maxValsOfSegArr); \r\n    }\r\n\r\n    function findPercentageDif(initVal, lastVal){\r\n        const dif = initVal-lastVal;\r\n        const perc = parseFloat(dif/initVal)*100;\r\n        return perc;\r\n    }\r\n   \r\n    function findMaxValue(data){\r\n        return Math.max(...data);\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport * as line from \"./SRline.js\";\r\nimport { List } from \"antd\";\r\nimport { InputNumber } from \"antd\";\r\nimport { Input } from \"antd\";\r\nimport { Button } from \"antd\";\r\nimport \"./TechnicalRequirements.css\";\r\n\r\nconst TechnicalRequirements = () => {\r\n  const [market, setMarket] = useState(\"BTCUSDT\");\r\n  const [tickInterval, setTickInterval] = useState(\"1d\");\r\n  const [tickCount, setTickCount] = useState(100);\r\n  const [pineEditorOutput, setPineEditorOutput] = useState([\r\n    'study(title=\"SRLine\", shorttitle=\"SRLine\", overlay=true)',\r\n  ]);\r\n\r\n  const [percentage, setPercentage] = useState(5);\r\n  const [strengthLevel, setStrengthLevel] = useState(1);\r\n  const [candleSequence, setCandleSeuqence] = useState(10);\r\n\r\n  const SRColors = {\r\n    \"1M\": \"orange\",\r\n    \"1w\": \"green\",\r\n    \"1d\": \"blue\",\r\n    \"4h\": \"yellow\",\r\n  };\r\n  const getBinanceData = () => {\r\n    const url =\r\n      \"https://api.binance.com/api/v3/klines?symbol=\" +\r\n      market +\r\n      \"&interval=\" +\r\n      tickInterval +\r\n      \"&limit=\" +\r\n      tickCount;\r\n    axios.get(url).then((res) => {\r\n      const arr = [];\r\n      const arr2 = [];\r\n      const arr3 = [];\r\n      const arrClose = [];\r\n      for (let i = 0; i < res.data.length; i++) {\r\n        const a = {\r\n          date: new Date(res.data[i][0]).toString(),\r\n          open: parseFloat(res.data[i][1]),\r\n          high: parseFloat(res.data[i][2]),\r\n          low: parseFloat(res.data[i][3]),\r\n          close: parseFloat(res.data[i][4]),\r\n        };\r\n        arr.push(a);\r\n        arr2.push(a.low);\r\n        arr3.push(a.high);\r\n        arrClose.push(a.close);\r\n      }\r\n      const minMean = line.SupLine(arr2, candleSequence, percentage, strengthLevel);\r\n      const maxMean = line.ResLine(arr3, candleSequence, percentage, strengthLevel);\r\n      minMean.push({ mean: Math.min(...arr2), strength: 99 });\r\n      maxMean.push({ mean: Math.max(...arr3), strength: 99 });\r\n      const eliminatedMin = eliminateCloseSR(minMean);\r\n      const eliminatedMax = eliminateCloseSR(maxMean);\r\n      const concatArr = eliminateCloseSR(\r\n        concatArray(eliminatedMin, eliminatedMax)\r\n      );\r\n\r\n      concatArr.forEach((el) => {\r\n        setPineText(\r\n          `hline(${el.mean}, title=\"none\", color=color.${SRColors[tickInterval]}, linestyle=hline.style_solid)`\r\n        );\r\n        //concatArrSimple.push(el.mean);\r\n      });\r\n    });\r\n  };\r\n\r\n  const findPercentageDif = (initVal, lastVal) => {\r\n    const dif = initVal - lastVal;\r\n    const perc = parseFloat(dif / initVal) * 100;\r\n    return perc;\r\n  };\r\n  const concatArray = (arr1, arr2) => {\r\n    return arr1.concat(arr2);\r\n  };\r\n  const eliminateCloseSR = (arr) => {\r\n    const removedElements = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n      for (let j = i; j < arr.length; j++) {\r\n        if (\r\n          Math.abs(findPercentageDif(arr[i].mean, arr[j].mean)) < 0.3 &&\r\n          findPercentageDif(arr[i].mean, arr[j].mean) !== 0 &&\r\n          !removedElements.includes(j) &&\r\n          !removedElements.includes(i)\r\n        ) {\r\n          if (arr[i].strength > arr[j].strength) {\r\n            removedElements.push(j);\r\n          } else {\r\n            removedElements.push(i);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return arr.filter((el, index) => !removedElements.includes(index));\r\n  };\r\n\r\n  const setPineText = (text) => {\r\n    setPineEditorOutput((prev) => [...prev, text]);\r\n  };\r\n  const clearPineText = () => {\r\n    setPineEditorOutput(['study(title=\"SRLine\", shorttitle=\"SRLine\", overlay=true)']);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\" }}>\r\n      <div>\r\n          <div>\r\n\r\n        <Button\r\n          className=\"setupButtons\"\r\n          type=\"primary\"\r\n          onClick={getBinanceData}\r\n        >\r\n          CREATE PINE OUTPUT\r\n        </Button>\r\n        <Button\r\n          className=\"setupButtons\"\r\n          type=\"primary\"\r\n          onClick={clearPineText}\r\n        >\r\n          CLEAR\r\n        </Button>\r\n          </div>\r\n        <div className=\"selectionBox\">\r\n          <Input\r\n            placeholder=\"Parity\"\r\n            onChange={(e) => setMarket(e.target.value.toUpperCase())}\r\n            style={{'text-transform':'uppercase'}}\r\n          ></Input>\r\n          <Input\r\n            placeholder=\"Tick interval (1m,1w,1d,etc.)\"\r\n            onChange={(e) => setTickInterval(e.target.value)}\r\n          ></Input>\r\n          <Input\r\n            placeholder=\"Tick Count\"\r\n            onChange={(e) => setTickCount(e.target.value)}\r\n          ></Input>\r\n          <Input\r\n            placeholder=\"SR gap percentage\"\r\n            onChange={(e) => setPercentage(parseInt(e.target.value))}\r\n          ></Input>\r\n          <Input\r\n            placeholder=\"SR strength level\"\r\n            onChange={(e) => setStrengthLevel(parseInt(e.target.value))}\r\n          ></Input>\r\n          <Input\r\n            placeholder=\"SR candle sequence\"\r\n            onChange={(e) => setCandleSeuqence(parseInt(e.target.value))}\r\n          ></Input>\r\n        </div>\r\n      </div>\r\n      <List\r\n        size=\"small\"\r\n        header={<div>//@version=4</div>}\r\n        footer={<div>plot(close)</div>}\r\n        bordered\r\n        dataSource={pineEditorOutput}\r\n        renderItem={(item) => <List.Item>{item}</List.Item>}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TechnicalRequirements;\r\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React, { useState } from \"react\";\nimport { Table } from \"antd\";\nimport { InputNumber } from \"antd\";\nimport { Input } from \"antd\";\nimport { Select } from \"antd\";\nimport { Button } from \"antd\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport TechTab from \"./TechnicalAnalysis/TechnicalRequirements\";\nlet intervalId = -1;\n\nfunction App() {\n  const [trackTable, setTrackTable] = useState([]);\n  const [price, setPrice] = useState(0);\n  const [parity, setParity] = useState(\"usd\");\n  const [operation, setOperation] = useState(\"GREATER\");\n  const [telegramApi, setTelegramApi] = useState(\"\");\n  const [chatId, setChatId] = useState(-1);\n  const [backendIp, setBackendIp] = useState(\"\");\n  const [startButtonDisable, setStartButtonDisable] = useState(true);\n\n  const onSync = () => {\n    console.log(\"sync started...\");\n    const path = \"sync\";\n    axios.get(backendIp + path).then((res) => {\n      setTrackTable(res.data);\n      setStartButtonDisable(false);\n    });\n  };\n  const startTrack = () => {\n    clearInterval(intervalId);\n    axios.get(backendIp + \"startBot\").then((res) => {\n      console.log(res.data);\n    });\n    intervalId = setInterval(() => {\n      onSync();\n    }, 1000 * 60 * 5);\n  };\n  const stopTrack = () => {\n    clearInterval(intervalId);\n    const path = \"stop\";\n\n    axios.get(backendIp + path).then((res) => {\n      console.log(res.data);\n    });\n  };\n  const addParity = () => {\n    const path = \"add\";\n    const reqParam = { parity, operation, price };\n\n    axios.post(backendIp + path, reqParam).then((res) => {\n      setTrackTable(res.data);\n    });\n  };\n\n  const { Option } = Select;\n  const operationMenu = (\n    <Select\n      defaultValue=\"GREATER\"\n      style={{ width: 120 }}\n      onChange={setOperation}\n    >\n      <Option value=\"GREATER\">GREATER</Option>\n      <Option value=\"LESS\">LESS</Option>\n    </Select>\n  );\n\n  const removeTrack = (key) => {\n    const path = \"remove\";\n    console.log(key);\n    axios.post(backendIp + path, { key }).then((res) => {\n      setTrackTable(res.data);\n    });\n  };\n\n  const columns = [\n    {\n      title: \"Parity\",\n      dataIndex: \"parity\",\n      key: \"parity\",\n    },\n    {\n      title: \"Operation\",\n      dataIndex: \"operation\",\n      key: \"operation\",\n    },\n    {\n      title: \"Price\",\n      dataIndex: \"price\",\n      key: \"price\",\n    },\n    {\n      title: \"Date\",\n      dataIndex: \"date\",\n      key: \"date\",\n    },\n    {\n      title: \"Condition\",\n      dataIndex: \"conditionDone\",\n      key: \"conditionDone\",\n      render: (text, record) => {\n        let color = \"red\";\n        if (record.conditionDone) {\n          if (record.candleCloseCondition) color = \"green\";\n          else color = \"yellow\";\n        }\n        return (\n          <div\n            style={{ width: \"10px\", height: \"10px\", backgroundColor: color }}\n          ></div>\n        );\n      },\n    },\n    {\n      dataIndex: \"remove\",\n      key: \"remove\",\n      render: (text, record) => {\n        return (\n          <Button type=\"primary\" danger onClick={() => removeTrack(record.key)}>\n            {\" \"}\n            DELETE\n          </Button>\n        );\n      },\n    },\n  ];\n\n  const setTelegramConfig = () => {\n    const path = \"setTelegram\";\n    axios.post(backendIp + path, { telegramApi, chatId }).then((res) => {\n      console.log(\"telegramSet\");\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <div style={{ display: \"flex\" }}>\n        <div>\n          <div style={{ display: \"flex\" }}>\n            <Button className=\"setupButtons\" type=\"primary\" onClick={onSync}>\n              SYNC\n            </Button>\n            <Button\n              className=\"setupButtons\"\n              type=\"primary\"\n              onClick={startTrack}\n              disabled={startButtonDisable}\n            >\n              Start Track\n            </Button>\n            <Button className=\"setupButtons\" type=\"primary\" onClick={stopTrack}>\n              Stop Track\n            </Button>\n          </div>\n          <div>\n            <div style={{ width: \"300px\", margin: \"10px 10px\" }}>\n              <Input\n                placeholder=\"telegram api\"\n                onChange={(e) => setTelegramApi(e.target.value)}\n              ></Input>\n              <Input\n                placeholder=\"chatId\"\n                onChange={(e) => setChatId(e.target.value)}\n              ></Input>\n              <Input\n                placeholder=\"backend IP\"\n                onChange={(e) => setBackendIp(e.target.value)}\n              ></Input>\n            </div>\n            <Button\n              className=\"setupButtons\"\n              type=\"primary\"\n              onClick={setTelegramConfig}\n            >\n              Set Telegram\n            </Button>\n          </div>\n        </div>\n        <TechTab></TechTab>\n      </div>\n      <div className=\"additionBox\">\n        <div className=\"additionMenu\">\n          <h3>Parity</h3>\n          <h3>Operation</h3>\n          <h3>Price</h3>\n          <h3></h3>\n        </div>\n        <div className=\"additionMenu\">\n          <div>\n            <Input\n              placeholder=\"parity\"\n              onChange={(e) => setParity(e.target.value.toUpperCase())}\n              style={{'text-transform':'uppercase'}}\n            ></Input>\n          </div>\n          <div>{operationMenu}</div>\n          <div>\n            <InputNumber onChange={setPrice} />\n          </div>\n          <div>\n            <Button type=\"primary\" onClick={addParity}>\n              +\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"trackTable\">\n        <Table columns={columns} dataSource={trackTable} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />\n ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}